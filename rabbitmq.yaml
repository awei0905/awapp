apiVersion: v1
items:
- apiVersion: v1
  kind: Namespace
  metadata:
    creationTimestamp: null
    labels:
      kubernetes.io/metadata.name: rabbitmq
    name: rabbitmq
  spec: {}
  status:
    phase: Active
- apiVersion: v1
  data:
    pass: cGFzc3dvcmQ=
    user: YWRtaW5pc3RyYXRvcg==
  kind: Secret
  metadata:
    namespace: rabbitmq
    creationTimestamp: null
    name: rabbitmq-admin
  type: Opaque
- apiVersion: v1
  data:
    cookie: dGhpcyBzZWNyZXQgdmFsdWUgaXMgSlVTVCBBTiBFWEFNUExFLiBSZXBsYWNlIGl0IQ==
  kind: Secret
  metadata:
    namespace: rabbitmq
    creationTimestamp: null
    name: erlang-cookie
  type: Opaque
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    creationTimestamp: null
    name: rabbitmq
    namespace: rabbitmq
- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    creationTimestamp: null
    name: rabbitmq
    namespace: rabbitmq
  rules:
  - apiGroups:
    - ""
    resources:
    - endpoints
    verbs:
    - get
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - create
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    creationTimestamp: null
    name: rabbitmq
    namespace: rabbitmq
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: rabbitmq
  subjects:
  - kind: ServiceAccount
    name: rabbitmq
- apiVersion: v1
  data:
    enabled_plugins: |
      [rabbitmq_peer_discovery_k8s, rabbitmq_management, rabbitmq_prometheus].
    rabbitmq.conf: |
      cluster_formation.peer_discovery_backend = k8s
      cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
      cluster_formation.k8s.address_type = hostname
      cluster_formation.k8s.service_name = rabbitmq-headless
      queue_master_locator=min-masters
  kind: ConfigMap
  metadata:
    creationTimestamp: null
    name: rabbitmq-config
    namespace: rabbitmq
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: rabbitmq-headless
    namespace: rabbitmq
  spec:
    clusterIP: None
    internalTrafficPolicy: Cluster
    ports:
    - name: epmd
      port: 4369
      protocol: TCP
      targetPort: 4369
    - name: cluster-rpc
      port: 25672
      protocol: TCP
      targetPort: 25672
    selector:
      app: rabbitmq
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: null
    name: rabbitmq
    namespace: rabbitmq
  spec:
    podManagementPolicy: OrderedReady
    replicas: 3
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: rabbitmq
    serviceName: rabbitmq-headless
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: rabbitmq
        name: rabbitmq
        namespace: rabbitmq
      spec:
        containers:
        - env:
          - name: RABBITMQ_DEFAULT_PASS
            valueFrom:
              secretKeyRef:
                key: pass
                name: rabbitmq-admin
          - name: RABBITMQ_DEFAULT_USER
            valueFrom:
              secretKeyRef:
                key: user
                name: rabbitmq-admin
          - name: RABBITMQ_ERLANG_COOKIE
            valueFrom:
              secretKeyRef:
                key: cookie
                name: erlang-cookie
          image: rabbitmq:latest
          imagePullPolicy: Always
          livenessProbe:
            exec:
              command:
              - rabbitmq-diagnostics
              - status
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 15
          name: rabbitmq
          ports:
          - containerPort: 5672
            name: amqp
            protocol: TCP
          - containerPort: 15672
            name: management
            protocol: TCP
          - containerPort: 15692
            name: prometheus
            protocol: TCP
          - containerPort: 4369
            name: epmd
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - rabbitmq-diagnostics
              - ping
            failureThreshold: 3
            initialDelaySeconds: 20
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 10
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/rabbitmq
            name: rabbitmq-config-rw
          - mountPath: /var/lib/rabbitmq/mnesia
            name: rabbitmq-data
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - sh
          - -c
          - cp /tmp/rabbitmq/rabbitmq.conf /etc/rabbitmq/rabbitmq.conf && echo ''
            >> /etc/rabbitmq/rabbitmq.conf; cp /tmp/rabbitmq/enabled_plugins /etc/rabbitmq/enabled_plugins
          image: busybox:1.32.0
          imagePullPolicy: IfNotPresent
          name: rabbitmq-config
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/rabbitmq
            name: rabbitmq-config
          - mountPath: /etc/rabbitmq
            name: rabbitmq-config-rw
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 999
          runAsGroup: 999
          runAsUser: 999
        serviceAccount: rabbitmq
        serviceAccountName: rabbitmq
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: enabled_plugins
              path: enabled_plugins
            - key: rabbitmq.conf
              path: rabbitmq.conf
            name: rabbitmq-config
            optional: false
          name: rabbitmq-config
        - emptyDir: {}
          name: rabbitmq-config-rw
        - name: rabbitmq-data
          persistentVolumeClaim:
            claimName: rabbitmq-data
    updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
    volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        creationTimestamp: null
        name: rabbitmq-data
        namespace: rabbitmq
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 3Gi
        storageClassName: standard
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    availableReplicas: 0
    replicas: 0
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: rabbitmq
      type: NodePort
    name: rabbitmq-client
    namespace: rabbitmq
  spec:
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ports:
    - name: http
      port: 15672
      protocol: TCP
      targetPort: 15672
    - name: prometheus
      port: 15692
      protocol: TCP
      targetPort: 15692
    - name: amqp
      port: 5672
      protocol: TCP
      targetPort: 5672
    selector:
      app: rabbitmq
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
kind: List
metadata: {}
